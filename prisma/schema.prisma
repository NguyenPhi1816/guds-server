// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              Int    @id @default(autoincrement())
  userPhoneNumber String @unique
  password        String
  roleId          Int
  status          String

  userRole Role @relation(fields: [roleId], references: [id])
  user     User @relation(fields: [userPhoneNumber], references: [phoneNumber])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  accounts Account[]
}

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  address     String
  phoneNumber String   @unique
  gender      String
  dateOfBirth DateTime
  image       String?
  email       String   @unique

  account Account?
  reviews Review[]
  orders  Order[]
  carts   Cart[]
}

model Category {
  id          Int    @id @default(autoincrement())
  slug        String @unique
  name        String @unique
  image       String
  description String
  parentId    Int?

  baseProductCategories BaseProductCategory[]
  parent                Category?             @relation("CategoryParent", fields: [parentId], references: [id])
  children              Category[]            @relation("CategoryParent")
}

model BaseProduct {
  id          Int    @id @default(autoincrement())
  slug        String @unique
  name        String @unique
  description String
  status      String
  brandId     Int

  brand                 Brand                 @relation(fields: [brandId], references: [id])
  images                BaseProductImage[]
  baseProductCategories BaseProductCategory[]
  options               Option[]
  productVariants       ProductVariant[]
}

model BaseProductImage {
  id            Int     @id @default(autoincrement())
  path          String
  isDefault     Boolean
  baseProductId Int

  baseProduct BaseProduct @relation(fields: [baseProductId], references: [id])
}

model Option {
  id            Int    @id @default(autoincrement())
  name          String
  baseProductId Int
  status        String

  baseProduct  BaseProduct   @relation(fields: [baseProductId], references: [id])
  optionValues OptionValue[]

  @@unique([name, baseProductId])
}

model OptionValue {
  id       Int    @id @default(autoincrement())
  value    String
  optionId Int
  status   String

  option              Option               @relation(fields: [optionId], references: [id])
  optionValueVariants OptionValueVariant[]

  @@unique([optionId, value])
}

model OptionValueVariant {
  optionValueId    Int
  productVariantId Int

  optionValue    OptionValue    @relation(fields: [optionValueId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@id([optionValueId, productVariantId])
}

model ProductVariant {
  id            Int    @id @default(autoincrement())
  quantity      Int
  image         String
  baseProductId Int

  optionValueVariants OptionValueVariant[]
  prices              Price[]
  baseProduct         BaseProduct          @relation(fields: [baseProductId], references: [id])
  orderDetails        OrderDetail[]
  carts               Cart[]
}

model Price {
  price            Float
  updatedAt        DateTime
  productVariantId Int

  ProductVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@id([productVariantId, price, updatedAt])
}

model Order {
  id                  Int      @id @default(autoincrement())
  userId              Int
  receiverName        String
  receiverPhoneNumber String
  receiverAddress     String
  note                String?
  createAt            DateTime @default(now())
  status              String

  user         User          @relation(fields: [userId], references: [id])
  orderDetails OrderDetail[]
  payment      Payment?
}

model OrderDetail {
  id               Int @id @default(autoincrement())
  orderId          Int
  productVariantId Int
  quantity         Int

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
  order          Order          @relation(fields: [orderId], references: [id])
  review         Review?
}

model Payment {
  id            Int       @id @default(autoincrement())
  orderId       Int       @unique
  paymentMethod String
  paymentDate   DateTime?
  totalPrice    Float
  status        String
  transactionId String?

  order Order @relation(fields: [orderId], references: [id])
}

model Review {
  id            Int      @id @default(autoincrement())
  comment       String?
  rating        Int
  createdAt     DateTime @default(now())
  updateAt      DateTime
  userId        Int
  orderDetailId Int      @unique

  user        User        @relation(fields: [userId], references: [id])
  orderDetail OrderDetail @relation(fields: [orderDetailId], references: [id])
}

model Cart {
  userId           Int
  productVariantId Int
  quantity         Int
  create_at        DateTime

  user           User           @relation(fields: [userId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])

  @@id([userId, productVariantId])
}

model Brand {
  id    Int    @id @default(autoincrement())
  slug  String @unique
  name  String @unique
  image String

  baseProducts BaseProduct[]
}

model BaseProductCategory {
  categoryId    Int
  baseProductId Int

  category    Category    @relation(fields: [categoryId], references: [id])
  baseProduct BaseProduct @relation(fields: [baseProductId], references: [id])

  @@id([categoryId, baseProductId])
}
