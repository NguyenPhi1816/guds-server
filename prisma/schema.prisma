// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  Id              Int    @id @default(autoincrement())
  UserPhoneNumber String @unique
  Password        String
  UserRoleId      Int
  Status          String

  userRole UserRole @relation(fields: [UserRoleId], references: [Id])
  user     User     @relation(fields: [UserPhoneNumber], references: [PhoneNumber])
}

model UserRole {
  Id   Int    @id @default(autoincrement())
  Name String

  accounts Account[]
}

model User {
  Id          Int      @id @default(autoincrement())
  FirstName   String
  LastName    String
  Address     String
  PhoneNumber String   @unique
  Gender      String
  DateOfBirth DateTime
  Avatar      String?
  Email       String   @unique

  account   Account?
  feedbacks Feedback[]
  orders    Order[]
  cart      Cart?
}

model Category {
  Id          Int    @id @default(autoincrement())
  Slug        String @unique
  Name        String @unique
  Image       String
  Description String

  baseProducts BaseProduct[]
}

model BaseProduct {
  Id          Int    @id @default(autoincrement())
  Slug        String @unique
  Name        String @unique
  Description String
  CategoryId  Int
  Status      String

  category        Category           @relation(fields: [CategoryId], references: [Id])
  images          BaseProductImage[]
  productVariants ProductVariant[]
}

model BaseProductImage {
  Id            Int     @id @default(autoincrement())
  BaseProductId Int
  Path          String
  IsDefault     Boolean

  baseProduct BaseProduct @relation(fields: [BaseProductId], references: [Id])
}

model Option {
  Id   Int    @id @default(autoincrement())
  Name String @unique

  optionValues OptionValue[]
}

model OptionValue {
  Id       Int    @id @default(autoincrement())
  OptionId Int
  Value    String

  option              Option               @relation(fields: [OptionId], references: [Id])
  optionValueVariants OptionValueVariant[]
}

model OptionValueVariant {
  OptionValueId    Int
  ProductVariantId Int

  optionValue    OptionValue    @relation(fields: [OptionValueId], references: [Id])
  productVariant ProductVariant @relation(fields: [ProductVariantId], references: [Id])

  @@id([OptionValueId, ProductVariantId])
}

model ProductVariant {
  Id            Int    @id @default(autoincrement())
  Quantity      Int
  Image         String
  BaseProductId Int

  optionValueVariants OptionValueVariant[]
  prices              Price[]
  baseProduct         BaseProduct          @relation(fields: [BaseProductId], references: [Id])
  feedbacks           Feedback[]
  orderDetails        OrderDetail[]
  cartDetails         CartDetail[]
}

model Price {
  ProductVariantId Int
  Price            Int
  UpdatedAt        DateTime

  ProductVariant ProductVariant @relation(fields: [ProductVariantId], references: [Id])

  @@id([ProductVariantId, Price, UpdatedAt])
}

model Order {
  Id       Int      @id @default(autoincrement())
  UserId   Int
  Note     String?
  CreateAt DateTime @default(now())
  Status   String

  user         User          @relation(fields: [UserId], references: [Id])
  orderDetails OrderDetail[]
  payment      Payment?
}

model OrderDetail {
  Id               Int @id @default(autoincrement())
  ProductVariantId Int
  OrderId          Int
  Quantity         Int

  productVariant ProductVariant @relation(fields: [ProductVariantId], references: [Id])
  order          Order          @relation(fields: [OrderId], references: [Id])
  feedback       Feedback?
}

model Payment {
  Id            Int       @id @default(autoincrement())
  OrderId       Int       @unique
  PaymentMethod String
  Amount        Float
  PaymentDate   DateTime?
  Status        String
  TransactionId String?

  order Order @relation(fields: [OrderId], references: [Id])
}

model Feedback {
  Id               Int      @id @default(autoincrement())
  UserId           Int
  ProductVariantId Int
  CreatedAt        DateTime @default(now())
  Comment          String?
  Rating           Int
  OrderDetailId    Int      @unique

  user           User           @relation(fields: [UserId], references: [Id])
  productVariant ProductVariant @relation(fields: [ProductVariantId], references: [Id])
  orderDetail    OrderDetail    @relation(fields: [OrderDetailId], references: [Id])
}

model Cart {
  Id     Int @id @default(autoincrement())
  UserId Int @unique

  user        User         @relation(fields: [UserId], references: [Id])
  cartDetails CartDetail[]
}

model CartDetail {
  Id               Int @id @default(autoincrement())
  CartId           Int
  ProductVariantId Int
  Quantity         Int

  cart           Cart           @relation(fields: [CartId], references: [Id])
  productVariant ProductVariant @relation(fields: [ProductVariantId], references: [Id])
}
